/*
Copyright Â© 2019 Marton Magyar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
  "bin2tap/tapfile"
  "bufio"
  "errors"
  "fmt"
  "io/ioutil"
  "log"
  "os"
  "path/filepath"
  "strconv"
  "strings"

  "github.com/spf13/cobra"
)

var Address uint
var SourcePath string
var MaxUint int
var Outfile string

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
  Use:   "bin2tap",
  Short: "A Z80 binary file to ZX Spectrum TAP file converter",
  Long: `Converts .bin files generated by an assembler into .tap files
which can be loaded by emulators. Loading address must be given.
This will work for code only, the TAP data block type will be 'machine code'.

Usage: bin2asm binfile [tapfile] [flags]
Example: bin2asm myprog.bin -a 32768`,
  Run: func(cmd *cobra.Command, args []string) {

    var t tapfile.TAP_BIN_File

    inDir, inFile := filepath.Split(args[0])
    name := strings.TrimSuffix(inFile, filepath.Ext(inFile))

    f, err := os.Open(args[0])
    if err != nil {
      log.Fatal(err)
    }
    defer f.Close()

    t.Init()
    t.SetFilename(name)
    t.ReadBinData(bufio.NewReader(f))
    t.SetStartAddress(uint16(Address))
    t.CalcChecksums()

    if len(Outfile) < 1 {
      name := strings.TrimSuffix(inFile, filepath.Ext(inFile))
      Outfile = inDir + name + ".tap"
    }

    log.Println("Writing to file %s", Outfile)

    of, err := os.OpenFile(Outfile, os.O_RDWR|os.O_CREATE, 0644)
    if err != nil {
      log.Fatal(err)
    }
    defer of.Close()
    bufof := bufio.NewWriter(of)
    defer bufof.Flush()
    t.Write(bufof)
  },
  Args: rootArgsValidator,
  //cobra.RangeArgs(1,2)
}

func existsBinFile(f string) bool {

  info, err := os.Stat(f)
  if os.IsNotExist(err) {
    return false
  }
  if info.IsDir() {
    return false
  }
  if strings.Compare(filepath.Ext(f), ".bin") != 0 {
    return false
  }
  return true
}

func isTapFile(f string) (bool, error) {
  // Check if file already exists
  if _, err := os.Stat(f); err == nil {
    return true, nil
  }

  // Attempt to create it
  var d []byte
  if err := ioutil.WriteFile(f, d, 0644); err == nil {
    os.Remove(f) // And delete it
    return true, nil
  } else {
    return false, err
  }

  return false, nil
}

func rootArgsValidator(cmd *cobra.Command, args []string) error {

  if len(args) < 1 {
    return errors.New("requires at least one argument")
  }
  if len(args) > 2 {
    return errors.New("requires not more than two arguments")
  }
  if existsBinFile(args[0]) {
    return fmt.Errorf("first argument is not a .bin file: %s", args[0])
  }
  if len(args) > 1 {
    if b, err := isTapFile(args[1]); !b {
      Outfile = ""
      if err == nil {
        return fmt.Errorf("second argument is not a valid .tap file name: %s", args[1])
      } else {
        log.Println("second argument is not a valid .tap file name: %s", args[1])
        return err
      }
    }
    Outfile = args[1]
  }

  return nil
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
  if err := rootCmd.Execute(); err != nil {
    fmt.Println(err)
    os.Exit(1)
  }
}

func init() {
  var MaxUint uint = (1 << strconv.IntSize) - 1

  rootCmd.PersistentFlags().UintVarP(&Address, "address", "a", MaxUint,
    "Starting address of binary in Z80 address space, decimal or hex ('0x' prefix)")
  rootCmd.MarkFlagRequired("address")
  //TODO: check if implement rootCmd.NoOptDefVal("address") = MaxUint
}
